// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simulation.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace FrontEnd {
  public static class FrontEnd
  {
    static readonly string __ServiceName = "front_end.FrontEnd";

    static readonly Marshaller<global::FrontEnd.CommandRequest> __Marshaller_CommandRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FrontEnd.CommandRequest.Parser.ParseFrom);
    static readonly Marshaller<global::FrontEnd.StatusReply> __Marshaller_StatusReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FrontEnd.StatusReply.Parser.ParseFrom);

    static readonly Method<global::FrontEnd.CommandRequest, global::FrontEnd.StatusReply> __Method_ExecuteMentalCommand = new Method<global::FrontEnd.CommandRequest, global::FrontEnd.StatusReply>(
        MethodType.Unary,
        __ServiceName,
        "ExecuteMentalCommand",
        __Marshaller_CommandRequest,
        __Marshaller_StatusReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FrontEnd.SimulationReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FrontEnd</summary>
    public abstract class FrontEndBase
    {
      public virtual global::System.Threading.Tasks.Task<global::FrontEnd.StatusReply> ExecuteMentalCommand(global::FrontEnd.CommandRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(FrontEndBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ExecuteMentalCommand, serviceImpl.ExecuteMentalCommand).Build();
    }

  }
}
#endregion
